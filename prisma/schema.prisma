datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId  
  username  String   @unique
  email     String   @unique
  password  String
  name      String
  role      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  profile   Profile?
  courses   CourseEnrollment[]
  messages  Message[]
  assignments Assignment[]
  conversations ConversationParticipants[]
  seenMessages MessageSeen[]
  accounts Account[]
}

model Account {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  type String
  provider String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([provider, providerAccountId])
}

model Profile {
  userId String @id @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  bio       String?
  gpa       Float?
  major     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  instructor  String
  credits     Int
  schedule    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  enrollments CourseEnrollment[]
  assignments Assignment[]
  announcements Announcement[]
}

model CourseEnrollment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  courseId String @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  grade     Float?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, courseId])
}

model Conversation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name String?
  isGroup Boolean?
  messages Message[]
  participants ConversationParticipants[]
}

model ConversationParticipants {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  conversationId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  conversation Conversation @relation(fields: [conversationId], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  body String?
  image String?
  createdAt DateTime @default(now())
  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id], onDelete: Cascade)
  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  seenBy MessageSeen[]
}

model MessageSeen {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  messageId String @db.ObjectId
  user User @relation(fields: [userId], references: [id])
  message Message @relation(fields: [messageId], references: [id])
}

model Assignment {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  description String
  courseId  String @db.ObjectId
  userId    String @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  dueDate   DateTime
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Announcement {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  content   String
  courseId  String @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
